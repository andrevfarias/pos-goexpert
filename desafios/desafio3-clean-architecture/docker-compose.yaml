services:
  app:
    build:
      context: .
      dockerfile: dockerfile
    container_name: app
    restart: unless-stopped
    ports:
      - 8080:8080
      - 50051:50051
      - 8000:8000
    volumes:
      - ./:/app
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

  migrate:
    image: migrate/migrate
    container_name: migrate
    restart: no
    depends_on:
      mysql:
        condition: service_healthy
    volumes:
      - ./internal/infra/sql/migrations:/migrations
    entrypoint: migrate -path /migrations -database "mysql://root:root@tcp(mysql:3306)/orders" up
    networks:
      - app-network

  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: orders
      MYSQL_PASSWORD: root
    ports:
      - 3306:3306
    volumes:
      - .docker/mysql:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:4-management-alpine
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - app-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  app-network:
    driver: bridge
